#!/usr/bin/perl

opendir(DIR,'/root/iptables.d');
my %allow_files = map { $_ => 1 } grep { /^allow_/ } readdir DIR;
closedir(DIR);
my %allow;
foreach (keys %allow_files) {
  /^allow_(\d+)_(...)_/;
  my ($port, $protocol) = ($1, $2);
  unless ($protocol and $port) {
    warn "Bad filename: '$_'\n";
  }
  else {
    $allow{$port}{$protocol}++;
  }
}

opendir(DIR,'/root/iptables.d');
my %deny_files  = map { $_ => 1 } grep { /^deny_/ } readdir DIR;
closedir(DIR);
my %deny;
foreach (keys %deny_files) {
  /^deny_(\d+)_(...)_/;
  my ($port, $protocol) = ($1, $2);
  unless ($protocol and $port) {
    warn "Bad filename: '$_'\n";
  }
  else {
    # Allow wins over deny as we deny lots by default
    $deny{$port}{$protocol}++ unless exists $allow{$port}{$protocol};
  }
}

open(OUTPUT, ">/root/iptables.d/iptables.new") or die "$!\n";
# header
print OUTPUT <<'EOT';
# Firewall configuration managed by puppet
# Manual customizations will be overwritten
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
EOT
# allow rules
foreach my $port (sort keys %allow) {
  foreach my $protocol (sort keys %{ $allow{$port} }) {
    print OUTPUT "-A INPUT -m state --state NEW -m ${protocol} -p ${protocol} --dport ${port} -j ACCEPT\n";
  }
}
# deny rules
foreach my $port (sort keys %deny) {
  foreach my $protocol (sort keys %{ $deny{$port} }) {
    print OUTPUT "-A INPUT -p ${protocol} --dport ${port} -j DROP\n";
  }
}
# footer
print OUTPUT <<'EOT';
-A INPUT -j LOG --log-prefix "DROP INPUT: "
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
EOT
close(OUTPUT);
system("mv /root/iptables.d/iptables.new /etc/sysconfig/iptables");
system("/sbin/restorecon /etc/sysconfig/iptables");
